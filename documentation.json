{
    "pipes": [],
    "interfaces": [
        {
            "name": "FileState",
            "id": "interface-FileState-329f542b63c5f16abdd7dbdc0275dd7e8b128b7706d9ae1ecdcc8fb9c1562d8006c3de73e8a7e0d4d22cbeb8e38df8c2d10adccfd7fcabf9fdeb42164d9534a2",
            "file": "src/app/store/files.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TableRowModel } from '@components/table-row/_model/table-row.model';\n\nexport interface UploadedFileModel extends TableRowModel {\n  isDeleted: boolean;\n}\n\nexport interface FileState {\n  pagination: {\n    page: number;\n    pageSize: number;\n  };\n  uploadedFiles: Record<UploadedFileModel['id'], UploadedFileModel>;\n}\n",
            "properties": [
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "uploadedFiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record< | UploadedFileModel>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NavBarModel",
            "id": "interface-NavBarModel-3615647afdc507e6665060b1242daab3fcfbf91fb332d7aeccd742fec721f2f142d0cf13036f833e97b52414775ed3750777197881bd2975e00a566099686741",
            "file": "src/app/components/nav-bar/_model/navbar.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface NavBarModel {\n  label: string;\n  route: string;\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TableRowModel",
            "id": "interface-TableRowModel-c510b0e72e6aa22f233382a730ab1d5b2c728edc373c3bce458526d23dc80cd6deb4537436891d99b7520df0e5d4be7d9af99fa351c926f156b6ec9a3a31ad71",
            "file": "src/app/components/table-row/_model/table-row.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableRowModel {\n  id: string;\n  file: File;\n  name: string;\n  description: string;\n  isValid: boolean;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UploadedFileModel",
            "id": "interface-UploadedFileModel-329f542b63c5f16abdd7dbdc0275dd7e8b128b7706d9ae1ecdcc8fb9c1562d8006c3de73e8a7e0d4d22cbeb8e38df8c2d10adccfd7fcabf9fdeb42164d9534a2",
            "file": "src/app/store/files.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TableRowModel } from '@components/table-row/_model/table-row.model';\n\nexport interface UploadedFileModel extends TableRowModel {\n  isDeleted: boolean;\n}\n\nexport interface FileState {\n  pagination: {\n    page: number;\n    pageSize: number;\n  };\n  uploadedFiles: Record<UploadedFileModel['id'], UploadedFileModel>;\n}\n",
            "properties": [
                {
                    "name": "isDeleted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "TableRowModel"
            ]
        },
        {
            "name": "ValidateJsonResult",
            "id": "interface-ValidateJsonResult-5695ed1a821530fc944e5d2077e78fd162420bccd413886d85c34915f834ec5326453c65c2c47ab3c03d021c459f1f8a1a61a6db3d74b83b5bbfb8a8ce301477",
            "file": "src/app/services/file-utils.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ValidationErrors } from '@angular/forms';\n\nexport interface ValidateJsonResult {\n  isValid: boolean;\n  content?: string;\n  error?: ValidationErrors;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FileUtilsService {\n  /**\n   * Validate a file is JSON and return its content.\n   */\n  async validateJsonFile(file: File): Promise<ValidateJsonResult> {\n    // Check file extension\n    if (!file.name.toLowerCase().endsWith('.json')) {\n      return {\n        isValid: false,\n        error: { invalidFileType: { message: 'Only JSON files are allowed' } },\n      };\n    }\n\n    try {\n      const content = await file.text();\n      JSON.parse(content); // Validate JSON\n      return { isValid: true, content };\n    } catch {\n      return { isValid: false };\n    }\n  }\n\n  /**\n   * Generate a unique ID for a file using name + timestamp.\n   */\n  generateUniqueId(name: string): string {\n    return `${name}-${Date.now()}`;\n  }\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidationErrors",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "FileUtilsService",
            "id": "injectable-FileUtilsService-5695ed1a821530fc944e5d2077e78fd162420bccd413886d85c34915f834ec5326453c65c2c47ab3c03d021c459f1f8a1a61a6db3d74b83b5bbfb8a8ce301477",
            "file": "src/app/services/file-utils.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "generateUniqueId",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate a unique ID for a file using name + timestamp.\n",
                    "description": "<p>Generate a unique ID for a file using name + timestamp.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateJsonFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ValidateJsonResult>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValidate a file is JSON and return its content.\n",
                    "description": "<p>Validate a file is JSON and return its content.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ValidationErrors } from '@angular/forms';\n\nexport interface ValidateJsonResult {\n  isValid: boolean;\n  content?: string;\n  error?: ValidationErrors;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FileUtilsService {\n  /**\n   * Validate a file is JSON and return its content.\n   */\n  async validateJsonFile(file: File): Promise<ValidateJsonResult> {\n    // Check file extension\n    if (!file.name.toLowerCase().endsWith('.json')) {\n      return {\n        isValid: false,\n        error: { invalidFileType: { message: 'Only JSON files are allowed' } },\n      };\n    }\n\n    try {\n      const content = await file.text();\n      JSON.parse(content); // Validate JSON\n      return { isValid: true, content };\n    } catch {\n      return { isValid: false };\n    }\n  }\n\n  /**\n   * Generate a unique ID for a file using name + timestamp.\n   */\n  generateUniqueId(name: string): string {\n    return `${name}-${Date.now()}`;\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-f2ac4b5f48615a8f1c54bf9c9fcbc7815d04379d87172141d4bd4a7998206a161c237941b62d45166f888b54475d5e9010fc4bc3b3f2e1e7a80fd1c925ed993e",
            "file": "src/app/services/modal.service.ts",
            "properties": [
                {
                    "name": "_ngbModal",
                    "defaultValue": "inject(NgbModal)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "NgbModalOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "NgbModalRef",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "NgbModalOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable, Type } from '@angular/core';\nimport {\n  NgbModal,\n  NgbModalOptions,\n  NgbModalRef,\n} from '@ng-bootstrap/ng-bootstrap';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private readonly _ngbModal = inject(NgbModal);\n\n  open<T>(component: Type<T>, options?: NgbModalOptions): NgbModalRef {\n    return this._ngbModal.open(component, options);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PlatformService",
            "id": "injectable-PlatformService-627b746fb197f77e5e46b9e27d65907b759a7eefe80d99cee7e6a230d5bb06b87566de1022261c1af77ae0f4717ed28ebe15248ae4a6340ecf3b199275c75235",
            "file": "src/app/services/platform.service.ts",
            "properties": [
                {
                    "name": "_platformId",
                    "defaultValue": "inject(PLATFORM_ID)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { inject, Injectable, PLATFORM_ID } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PlatformService {\n  private readonly _platformId = inject(PLATFORM_ID);\n\n  get isBrowser(): boolean {\n    return isPlatformBrowser(this._platformId);\n  }\n\n  get isServer(): boolean {\n    return isPlatformServer(this._platformId);\n  }\n\n  get localStorage(): Storage | null {\n    return this.isBrowser ? localStorage : null;\n  }\n\n  get window(): Window | null {\n    return this.isBrowser ? window : null;\n  }\n}\n",
            "accessors": {
                "isBrowser": {
                    "name": "isBrowser",
                    "getSignature": {
                        "name": "isBrowser",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 10
                    }
                },
                "isServer": {
                    "name": "isServer",
                    "getSignature": {
                        "name": "isServer",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 14
                    }
                },
                "localStorage": {
                    "name": "localStorage",
                    "getSignature": {
                        "name": "localStorage",
                        "type": "",
                        "returnType": "Storage | null",
                        "line": 18
                    }
                },
                "window": {
                    "name": "window",
                    "getSignature": {
                        "name": "window",
                        "type": "",
                        "returnType": "Window | null",
                        "line": 22
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "SelectModalFormControl",
            "id": "class-SelectModalFormControl-52616ab77a81329a4c88a70645459e129c585a3ffc038213fc97d08ce0f715b8de5c9a2873c7adfa691437fdd4c02e1831c7963811131486405eb1ac15ce1ab5",
            "file": "src/app/components/modal/select-modal/_model/select-modal.form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nconst githubUsername = 'test123';\n\nconst validateName: ValidatorFn = (control): ValidationErrors | null => {\n  const value = control.value;\n\n  // Built-in errors first\n  if (!value) return { required: { message: 'Name is required' } };\n  if (value.length < 1)\n    return { minlength: { message: 'Minimum length is 1' } };\n  if (value.length > 32)\n    return { maxlength: { message: 'Maximum length is 32' } };\n\n  // Custom validations\n  if (typeof value !== 'string')\n    return { invalidType: { message: 'Value must be a string' } };\n  if (!/^[A-Za-z0-9_-]+$/.test(value))\n    return {\n      invalidCharacters: {\n        message:\n          'Only alphanumeric characters, underscores, and hyphens are allowed',\n      },\n    };\n  if (!value.includes(`42c-${githubUsername}`))\n    return {\n      missingSubstring: {\n        message: `Value must include the substring '42c-${githubUsername}'`,\n      },\n    };\n\n  return null;\n};\n\nconst validateDescription: ValidatorFn = (control): ValidationErrors | null => {\n  const value = control.value;\n\n  // Built-in errors first\n  if (!value) return { required: { message: 'Description is required' } };\n  if (value.length > 128)\n    return { maxlength: { message: 'Maximum length is 128' } };\n\n  if (value.includes(`42c-${githubUsername}`))\n    return { forbiddenSubstring: true };\n  return null;\n};\n\nexport class SelectModalFormControl {\n  constructor(\n    public file: FormControl = new FormControl(null),\n    public name: FormControl = new FormControl(null, [validateName]),\n    public description: FormControl = new FormControl(null, [\n      validateDescription,\n    ]),\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "file",
                        "type": "FormControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new FormControl(null)"
                    },
                    {
                        "name": "name",
                        "type": "FormControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new FormControl(null, [validateName])"
                    },
                    {
                        "name": "description",
                        "type": "FormControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new FormControl(null, [\n      validateDescription,\n    ])"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "file",
                        "type": "FormControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new FormControl(null)",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "FormControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new FormControl(null, [validateName])",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "description",
                        "type": "FormControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new FormControl(null, [\n      validateDescription,\n    ])",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "description",
                    "defaultValue": "new FormControl(null, [\n      validateDescription,\n    ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "file",
                    "defaultValue": "new FormControl(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "new FormControl(null, [validateName])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "App",
            "id": "component-App-2abb9d5f7dece4e1b2e5b395e5b5d4036fa3f10c8a28f252f8680ac5bacf0ddf43d1093dd0d7f5310d27564e660aafbd8b42090c2e919c16d5741e324ac1391b",
            "file": "src/app/app.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet],\n  templateUrl: './app.html',\n  styleUrl: './app.scss',\n})\nexport class App {}\n",
            "styleUrl": "./app.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<router-outlet />\n"
        },
        {
            "name": "Button",
            "id": "component-Button-389be9d428425961e1de9942e2710e9624119fa26717a17b693d51d8875756a82337c95e9aef9386737740d61361c796c1a0c5a7d74ffba67d875d559b771794",
            "file": "src/app/components/button/button.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "secondary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"primary\" | \"secondary\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [
                {
                    "name": "clickButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "void",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "required": false
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.primary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.secondary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  input,\n  output,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  imports: [],\n  templateUrl: './button.html',\n  styleUrl: './button.scss',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Button {\n  protected readonly clickButton = output<void>();\n\n  readonly label = input.required<string>();\n  readonly primary = input<boolean>(false);\n  readonly secondary = input<boolean>(false);\n\n  readonly variant = input<'primary' | 'secondary'>('primary');\n\n  @HostBinding('class.primary') get isPrimary() {\n    return this.variant() === 'primary';\n  }\n\n  @HostBinding('class.secondary') get isSecondary() {\n    return this.variant() === 'secondary';\n  }\n}\n",
            "styleUrl": "./button.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "isPrimary": {
                    "name": "isPrimary",
                    "getSignature": {
                        "name": "isPrimary",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                },
                "isSecondary": {
                    "name": "isSecondary",
                    "getSignature": {
                        "name": "isSecondary",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                }
            },
            "templateData": "<button type=\"button\" (click)=\"clickButton.emit()\">\n  {{ label() }}\n</button>\n"
        },
        {
            "name": "DeleteModal",
            "id": "component-DeleteModal-44142e5d2f994e6966c799cfc40d000f69628e654df05590840a4816ef89239b391442c8ec9f2683ba3ff8a1cb29f10311ec3a97ce6642556140c68c6017617c",
            "file": "src/app/components/modal/delete-modal/delete-modal.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./delete-modal.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UploadedFileModel",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_fileStore",
                    "defaultValue": "inject(FileStore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "activeModal",
                    "defaultValue": "inject(NgbActiveModal)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onConfirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "Button"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n  input,\n} from '@angular/core';\nimport { Button } from '@components/button/button';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { UploadedFileModel } from '@store/files.state';\nimport { FileStore } from '@store/files.store';\n\n@Component({\n  selector: 'app-delete-modal',\n  imports: [Button],\n  templateUrl: './delete-modal.html',\n  styleUrl: './delete-modal.scss',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeleteModal {\n  private readonly _fileStore = inject(FileStore);\n\n  protected readonly activeModal = inject(NgbActiveModal);\n\n  readonly file = input.required<UploadedFileModel>();\n\n  onConfirm(): void {\n    this._fileStore.deleteFile(this.file());\n    this.activeModal.close();\n  }\n\n  onCancel(): void {\n    this.activeModal.close();\n  }\n}\n",
            "styleUrl": "./delete-modal.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"modal-header\">\n  <h4 class=\"modal-title\">Confirm file deleting</h4>\n  <button\n    type=\"button\"\n    class=\"btn-close\"\n    aria-label=\"Close\"\n    (click)=\"activeModal.dismiss('Cross click')\"\n  ></button>\n</div>\n<div class=\"modal-body\">\n  Are you sure you want to delete the file «{{ file().file.name }}»?\n</div>\n<div class=\"modal-footer\">\n  <app-button\n    variant=\"secondary\"\n    label=\"Cancel\"\n    (clickButton)=\"onCancel()\"\n  ></app-button>\n  <app-button\n    variant=\"primary\"\n    label=\"Confirm\"\n    (clickButton)=\"onConfirm()\"\n  ></app-button>\n</div>\n"
        },
        {
            "name": "Files",
            "id": "component-Files-bf3458f4e75ee6aa8bc95a7574f3cd3f5d9e72cf845ac8ca87cbea933dac6a7d5a5fd5eff122bd4bb86774e68837102b1e5c5ae21f58e15cda2662d715b2296a",
            "file": "src/app/pages/files/files.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-files",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./files.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_fileStore",
                    "defaultValue": "inject(FileStore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_modalService",
                    "defaultValue": "inject(ModalService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "filesSignal",
                    "defaultValue": "this._fileStore.filesUploaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onUploadFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TableRow"
                },
                {
                    "name": "Button"
                },
                {
                    "name": "NgbAlert"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Button } from '@components/button/button';\nimport { SelectModal } from '@components/modal/select-modal/select-modal';\nimport { TableRow } from '@components/table-row/table-row';\nimport { NgbAlert } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalService } from '@services/modal.service';\nimport { FileStore } from '@store/files.store';\n\n@Component({\n  selector: 'app-files',\n  imports: [TableRow, Button, NgbAlert],\n  templateUrl: './files.html',\n  styleUrl: './files.scss',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Files {\n  private readonly _modalService = inject(ModalService);\n  private readonly _fileStore = inject(FileStore);\n  private readonly _router = inject(Router);\n\n  protected readonly filesSignal = this._fileStore.filesUploaded;\n\n  onUploadFile(): void {\n    this._modalService.open(SelectModal, { size: 'md', centered: true });\n  }\n\n  constructor() {\n    this._router.navigate([], {\n      queryParams: {\n        page: 1,\n      },\n    });\n  }\n}\n",
            "styleUrl": "./files.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 27
            },
            "extends": [],
            "templateData": "<section>\n  <article>\n    <h1>\n      {{ filesSignal().length }} file{{ filesSignal().length === 1 ? \"\" : \"s\" }}\n    </h1>\n    <app-button\n      variant=\"primary\"\n      label=\"Upload file\"\n      (clickButton)=\"onUploadFile()\"\n    ></app-button>\n  </article>\n\n  @if (filesSignal().length) {\n    <app-table-row [files]=\"filesSignal()\"> </app-table-row>\n  } @else {\n    <ngb-alert [dismissible]=\"false\">\n      <strong>Warning!</strong> No files uploaded yet.\n    </ngb-alert>\n  }\n</section>\n"
        },
        {
            "name": "Home",
            "id": "component-Home-7f99451f73bc003dd55774477888e2974e633083403ce98cee4c50f3a1711709367485c390714476998483196ad8a034904bbc577409deddb556d14bd5c54f13",
            "file": "src/app/pages/home/home.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_fileStore",
                    "defaultValue": "inject(FileStore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_modalService",
                    "defaultValue": "inject(ModalService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "filesSignal",
                    "defaultValue": "this._fileStore.filesUploaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onUploadFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "Button"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { Router, RouterLink } from '@angular/router';\nimport { Button } from '@components/button/button';\nimport { SelectModal } from '@components/modal/select-modal/select-modal';\nimport { ModalService } from '@services/modal.service';\nimport { FileStore } from '@store/files.store';\n\n@Component({\n  selector: 'app-home',\n  imports: [Button, RouterLink],\n  templateUrl: './home.html',\n  styleUrl: './home.scss',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Home {\n  private readonly _modalService = inject(ModalService);\n  private readonly _fileStore = inject(FileStore);\n  private readonly _router = inject(Router);\n\n  protected readonly filesSignal = this._fileStore.filesUploaded;\n\n  onUploadFile(): void {\n    this._modalService.open(SelectModal, { size: 'md', centered: true });\n  }\n\n  constructor() {\n    this._router.navigate([], {\n      queryParams: {\n        page: null,\n      },\n    });\n  }\n}\n",
            "styleUrl": "./home.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "extends": [],
            "templateData": "<section>\n  <img\n    src=\"assets/images/card-img.svg\"\n    alt=\"Welcome image\"\n    width=\"300\"\n    height=\"300\"\n  />\n  <article>\n    <h1>Welcome!</h1>\n    <p>Upload JSON files in a quick and efficient way.</p>\n    <a routerLink=\"/files\">\n      @if (filesSignal().length) {\n        {{ filesSignal().length }} file{{\n          filesSignal().length === 1 ? \"\" : \"s\"\n        }}\n        uploaded already\n      } @else {\n        No files uploaded yet\n      }\n    </a>\n\n    <app-button\n      variant=\"primary\"\n      label=\"Upload file\"\n      (clickButton)=\"onUploadFile()\"\n    ></app-button>\n  </article>\n</section>\n"
        },
        {
            "name": "Layout",
            "id": "component-Layout-9bf0e286c44cf96e39ffaff0a69018b118eee482aabaf23540a738731d12bb0d52f3d18b2a83490db0788c0cbcd2a42fc8733ad0ce87a2c52d5e249daf6fb53f",
            "file": "src/app/components/layout/layout.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./layout.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NavBar"
                },
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { NavBar } from '@components/nav-bar/nav-bar';\n\n@Component({\n  selector: 'app-layout',\n  imports: [NavBar, RouterOutlet],\n  templateUrl: './layout.html',\n  styleUrl: './layout.scss',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Layout {}\n",
            "styleUrl": "./layout.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<section>\n  <app-nav-bar></app-nav-bar>\n\n  <article>\n    <router-outlet />\n  </article>\n</section>\n"
        },
        {
            "name": "NavBar",
            "id": "component-NavBar-3d91fd88dc7b59bcf093656cd171e5deae9d7039900150a25d7ea3f851c8057b7a7e3024bfc4b8c05a11ee62762f0ef7bfdb61421b7c1215799eb53d44ad9f63",
            "file": "src/app/components/nav-bar/nav-bar.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav-bar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./nav-bar.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "navItems",
                    "defaultValue": "[\n    {\n      route: `/${RoutesConstants.HOME}`,\n      label: 'Home',\n    },\n    {\n      route: `/${RoutesConstants.FILES}`,\n      label: 'Files',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavBarModel[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { RoutesConstants } from '@shared/routes.constants';\nimport { NavBarModel } from './_model/navbar.model';\nimport { RouterLink, RouterLinkActive } from '@angular/router';\n\n@Component({\n  selector: 'app-nav-bar',\n  imports: [RouterLink, RouterLinkActive],\n  templateUrl: './nav-bar.html',\n  styleUrl: './nav-bar.scss',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavBar {\n  protected readonly navItems: NavBarModel[] = [\n    {\n      route: `/${RoutesConstants.HOME}`,\n      label: 'Home',\n    },\n    {\n      route: `/${RoutesConstants.FILES}`,\n      label: 'Files',\n    },\n  ];\n}\n",
            "styleUrl": "./nav-bar.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<aside>\n  <a routerLink=\"/\" class=\"logo-container\">\n    <img src=\"assets/images/logo.svg\" alt=\"Logo\" width=\"28\" height=\"28\" />\n    GetYourJSON\n  </a>\n  <nav>\n    @for (item of navItems; track item.label) {\n      <a [routerLink]=\"item?.route\" routerLinkActive=\"active\">{{\n        item?.label\n      }}</a>\n    }\n  </nav>\n</aside>\n"
        },
        {
            "name": "SelectModal",
            "id": "component-SelectModal-efe80a06f17574403d16e5b1a81f5a6fc027223d214bdb3f4b034a356e7c891c779ea865bcf1161c27d768ee282f58765d99b9e7984936c6489d452d59ac770a",
            "file": "src/app/components/modal/select-modal/select-modal.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select-modal.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_fileStore",
                    "defaultValue": "inject(FileStore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_fileUtilsService",
                    "defaultValue": "inject(FileUtilsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_formBuilder",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "activeModal",
                    "defaultValue": "inject(NgbActiveModal)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "isFormSubmitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "objectKeys",
                    "defaultValue": "Object.keys",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "uploadedFileSignal",
                    "defaultValue": "signal<File | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFileChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUpload",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "populateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "Button"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n  signal,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { SelectModalFormControl } from './_model/select-modal.form.model';\nimport { Button } from '@components/button/button';\nimport { FileStore } from '@store/files.store';\nimport { UploadedFileModel } from '@store/files.state';\nimport { FileUtilsService } from '@services/file-utils.service';\n\n@Component({\n  selector: 'app-select-modal',\n  imports: [ReactiveFormsModule, Button],\n  templateUrl: './select-modal.html',\n  styleUrl: './select-modal.scss',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectModal {\n  private readonly _formBuilder = inject(FormBuilder);\n  private readonly _fileStore = inject(FileStore);\n  private readonly _fileUtilsService = inject(FileUtilsService);\n\n  protected isFormSubmitted = false;\n  protected form!: FormGroup;\n  protected readonly activeModal = inject(NgbActiveModal);\n\n  protected readonly objectKeys = Object.keys;\n\n  protected uploadedFileSignal = signal<File | null>(null);\n\n  private populateForm(): FormGroup {\n    return this._formBuilder.group(new SelectModalFormControl());\n  }\n\n  constructor() {\n    this.form = this.populateForm();\n  }\n\n  onFileChange(event: Event) {\n    const input = event.target as HTMLInputElement;\n    if (input.files && input.files.length > 0) {\n      const file = input.files[0];\n\n      this.uploadedFileSignal.set(file);\n      this.form.get('file')?.setErrors(null);\n    }\n  }\n\n  async onUpload(): Promise<void> {\n    this.isFormSubmitted = true;\n\n    const uploadedFile = this.uploadedFileSignal();\n    const name = this.form.value.name;\n    const description = this.form.value.description;\n\n    if (!uploadedFile) {\n      this.form.get('file')?.setErrors({\n        invalidFileType: { message: 'File is required' },\n      });\n      return;\n    }\n\n    // Validate the file (extension + JSON content)\n    const { isValid, error } =\n      await this._fileUtilsService.validateJsonFile(uploadedFile);\n\n    if (error) {\n      this.form.get('file')?.setErrors(error);\n      return;\n    }\n\n    // Create a unique ID\n    const uniqueFileId = this._fileUtilsService.generateUniqueId(name);\n\n    // Build file model\n    const fileModel: UploadedFileModel = {\n      id: uniqueFileId,\n      name,\n      description,\n      file: uploadedFile,\n      isValid,\n      isDeleted: false,\n    };\n\n    // Upload\n    this._fileStore.uploadFile(fileModel);\n\n    this.activeModal.close();\n  }\n\n  onCancel(): void {\n    this.activeModal.close();\n  }\n}\n",
            "styleUrl": "./select-modal.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 38
            },
            "extends": [],
            "templateData": "<div class=\"modal-header\">\n  <h4 class=\"modal-title\">Select file</h4>\n  <button\n    type=\"button\"\n    class=\"btn-close\"\n    aria-label=\"Close\"\n    (click)=\"activeModal.dismiss('Cross click')\"\n  ></button>\n</div>\n<div class=\"modal-body\">\n  <form [formGroup]=\"form\">\n    <!-- FILE -->\n    <fieldset class=\"file-upload\">\n      <label for=\"file\" class=\"sr-only\">Choose file</label>\n      <input\n        id=\"file\"\n        type=\"file\"\n        (change)=\"onFileChange($event)\"\n        accept=\".json,application/json\"\n      />\n      @if (form.get(\"file\")?.errors && isFormSubmitted) {\n        <small class=\"error\">\n          @for (key of objectKeys(form.get(\"file\")?.errors ?? {}); track key) {\n            {{ form.get(\"file\")?.errors?.[key]?.message }}\n          }\n        </small>\n      }\n    </fieldset>\n\n    <!-- NAME -->\n    <fieldset>\n      <label for=\"name\" class=\"sr-only\">Name</label>\n      <input id=\"name\" type=\"text\" formControlName=\"name\" placeholder=\"Name\" />\n\n      @if (form.get(\"name\")?.errors && isFormSubmitted) {\n        <small class=\"error\">\n          @for (key of objectKeys(form.get(\"name\")?.errors ?? {}); track key) {\n            {{ form.get(\"name\")?.errors?.[key]?.message }}\n          }\n        </small>\n      }\n    </fieldset>\n\n    <!-- DESCRIPTION -->\n    <fieldset>\n      <label for=\"description\" class=\"sr-only\">Description</label>\n      <input\n        type=\"text\"\n        formControlName=\"description\"\n        placeholder=\"Description\"\n      />\n\n      @if (form.get(\"description\")?.errors && isFormSubmitted) {\n        <small class=\"error\">\n          @for (\n            key of objectKeys(form.get(\"description\")?.errors ?? {});\n            track key\n          ) {\n            {{ form.get(\"description\")?.errors?.[key]?.message }}\n          }\n        </small>\n      }\n    </fieldset>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <app-button\n    variant=\"secondary\"\n    label=\"Cancel\"\n    (clickButton)=\"onCancel()\"\n  ></app-button>\n  <app-button\n    variant=\"primary\"\n    label=\"Upload\"\n    (clickButton)=\"onUpload()\"\n  ></app-button>\n</div>\n"
        },
        {
            "name": "TableRow",
            "id": "component-TableRow-63aa32629ac98ffda8c93728c553bac1611c5c29945d8c2b9028d06f422e7d3af14257783fdeaf56eca84cd9d076a1d804a8438513f9dd1408280f3a04d15d56",
            "file": "src/app/components/table-row/table-row.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table-row",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./table-row.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UploadedFileModel[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_fileStore",
                    "defaultValue": "inject(FileStore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "headers",
                    "defaultValue": "['File', 'Name', 'Description', 'Status', '']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "paginatedFilesSignal",
                    "defaultValue": "computed(() => {\n    const { page, pageSize } = this.paginationSignal();\n\n    return this.files()\n      .map((file) => ({ ...file }))\n      .slice((page - 1) * pageSize, (page - 1) * pageSize + pageSize);\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "paginationSignal",
                    "defaultValue": "this._fileStore.pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onPaginationChange",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgbPagination"
                },
                {
                    "name": "TableRowItem"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n  input,\n} from '@angular/core';\nimport { NgbPagination } from '@ng-bootstrap/ng-bootstrap';\nimport { UploadedFileModel } from '@store/files.state';\nimport { FileStore } from '@store/files.store';\nimport { TableRowItem } from './table-row-item/table-row-item';\n\n@Component({\n  selector: 'app-table-row',\n  imports: [NgbPagination, TableRowItem],\n  templateUrl: './table-row.html',\n  styleUrl: './table-row.scss',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableRow {\n  private readonly _fileStore = inject(FileStore);\n  readonly files = input.required<UploadedFileModel[]>();\n\n  protected readonly paginationSignal = this._fileStore.pagination;\n\n  protected readonly headers = ['File', 'Name', 'Description', 'Status', ''];\n\n  protected paginatedFilesSignal = computed(() => {\n    const { page, pageSize } = this.paginationSignal();\n\n    return this.files()\n      .map((file) => ({ ...file }))\n      .slice((page - 1) * pageSize, (page - 1) * pageSize + pageSize);\n  });\n\n  onPaginationChange(page: number): void {\n    this._fileStore.updatePagination({ page });\n  }\n}\n",
            "styleUrl": "./table-row.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<section>\n  <main>\n    <!-- HEADERS -->\n    <div class=\"header-container\">\n      @for (header of headers; track header) {\n        <span>{{ header }}</span>\n      }\n    </div>\n\n    <!-- LIST ITEMS -->\n    <div class=\"list-container\">\n      @for (file of paginatedFilesSignal(); track file.id) {\n        <app-table-row-item [file]=\"file\"></app-table-row-item>\n      }\n    </div>\n  </main>\n\n  <ngb-pagination\n    [collectionSize]=\"files().length\"\n    [(page)]=\"paginationSignal().page\"\n    [pageSize]=\"paginationSignal().pageSize\"\n    (pageChange)=\"onPaginationChange($event)\"\n  >\n  </ngb-pagination>\n</section>\n"
        },
        {
            "name": "TableRowItem",
            "id": "component-TableRowItem-7a7abc3669d2e5cad32be10e60e0e89b79d4f482a144e937d2acd0bb2d4ef33fc4e5e60aebab30e215723b0a9c8b65ba59209e00d57718681f0e88e7f9e19c50",
            "file": "src/app/components/table-row/table-row-item/table-row-item.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table-row-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./table-row-item.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UploadedFileModel",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_modalService",
                    "defaultValue": "inject(ModalService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDeleteFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "UploadedFileModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "UploadedFileModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\nimport { DeleteModal } from '@components/modal/delete-modal/delete-modal';\nimport { ModalService } from '@services/modal.service';\nimport { UploadedFileModel } from '@store/files.state';\n\n@Component({\n  selector: 'app-table-row-item',\n  imports: [],\n  templateUrl: './table-row-item.html',\n  styleUrl: './table-row-item.scss',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableRowItem {\n  private readonly _modalService = inject(ModalService);\n\n  readonly file = input.required<UploadedFileModel>();\n\n  onDeleteFile(file: UploadedFileModel): void {\n    const modalRef = this._modalService.open(DeleteModal, {\n      size: 'md',\n      centered: true,\n    });\n    modalRef.componentInstance.file = signal(file);\n  }\n}\n",
            "styleUrl": "./table-row-item.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<article [class.inValid]=\"!file().isValid\">\n  <div class=\"file\">\n    <img\n      src=\"assets/images/icon_file_upload.svg\"\n      alt=\"File icon\"\n      width=\"16\"\n      height=\"16\"\n    />\n    <span>\n      {{ file().file.name }}\n    </span>\n  </div>\n  <div class=\"file-name\">\n    {{ file().name }}\n  </div>\n  <div class=\"file-description\">{{ file().description }}</div>\n  <div [class.valid]=\"file().isValid\" [class.inValid]=\"!file().isValid\">\n    <span>\n      {{ file().isValid ? \"Valid\" : \"Invalid\" }}\n    </span>\n  </div>\n  <div class=\"file-remove\">\n    <button\n      type=\"button\"\n      (click)=\"onDeleteFile(file())\"\n      (keydown.enter)=\"onDeleteFile(file())\"\n      class=\"btn btn-link\"\n      aria-label=\"Remove file\"\n    >\n      <img\n        src=\"assets/images/icon_remove.svg\"\n        alt=\"Remove file icon\"\n        width=\"16\"\n        height=\"16\"\n      />\n    </button>\n  </div>\n</article>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideBrowserGlobalErrorListeners(),\n    provideZonelessChangeDetection(),\n    provideRouter(routes, withHashLocation()),\n    provideStoreDevtools({ maxAge: 25, logOnly: !isDevMode() }),\n  ],\n}"
            },
            {
                "name": "FileStore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/files.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withDevtools('files'),\n  withState(initialState),\n  withComputed((state) => ({\n    filesUploaded: computed(() =>\n      Object.keys(state.uploadedFiles())\n        .map((key) => state.uploadedFiles()[key])\n        .filter((item) => !item.isDeleted),\n    ),\n  })),\n  withMethods(\n    (\n      store,\n      platformService = inject(PlatformService),\n      router = inject(Router),\n    ) => ({\n      uploadFile(file: UploadedFileModel): void {\n        patchState(store, (state) => ({\n          ...state,\n          uploadedFiles: {\n            [file.id]: {\n              ...file,\n              file: {\n                ...file.file,\n                name: file.file.name,\n              },\n            },\n            ...state.uploadedFiles,\n          },\n        }));\n\n        platformService.localStorage?.setItem(\n          JSON_FILES_LOCAL_STORAGE,\n          JSON.stringify(store.uploadedFiles()),\n        );\n\n        router.navigate(['/files']);\n      },\n\n      deleteFile(file: UploadedFileModel): void {\n        patchState(store, (state) => ({\n          ...state,\n          uploadedFiles: {\n            ...state.uploadedFiles,\n            [file.id]: {\n              ...state.uploadedFiles[file.id],\n              isDeleted: true,\n            },\n          },\n        }));\n\n        platformService.localStorage?.setItem(\n          JSON_FILES_LOCAL_STORAGE,\n          JSON.stringify(store.uploadedFiles()),\n        );\n      },\n\n      updatePagination(pagination: Partial<FileState['pagination']>): void {\n        patchState(store, (state) => ({\n          ...state,\n          pagination: {\n            ...state.pagination,\n            ...pagination,\n          },\n        }));\n\n        router.navigate([], {\n          queryParams: {\n            page: store.pagination().page,\n          },\n        });\n      },\n    }),\n  ),\n  withHooks(\n    (\n      store,\n      platformService = inject(PlatformService),\n      route = inject(ActivatedRoute),\n    ) => ({\n      onInit(): void {\n        const uploadedFilesInLocalStorage = JSON.parse(\n          platformService.localStorage?.getItem(JSON_FILES_LOCAL_STORAGE) ??\n            '{}',\n        );\n\n        const pageFromParams = route.snapshot.queryParamMap.get('page') ?? '1';\n\n        patchState(store, (state) => ({\n          uploadedFiles: {\n            ...state.uploadedFiles,\n            ...uploadedFilesInLocalStorage,\n          },\n          pagination: {\n            ...state.pagination,\n            page: +pageFromParams,\n          },\n        }));\n\n        // effect(() => {\n        //   const { page } = store.pagination();\n\n        //   router.navigate([], {\n        //     queryParams: {\n        //       page: page,\n        //     },\n        //   });\n        // });\n      },\n    }),\n  ),\n)"
            },
            {
                "name": "githubUsername",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/modal/select-modal/_model/select-modal.form.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'test123'"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/files.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FileState",
                "defaultValue": "{\n  pagination: {\n    page: 1,\n    pageSize: 5,\n  },\n  uploadedFiles: {},\n}"
            },
            {
                "name": "JSON_FILES_LOCAL_STORAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/files.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'jsonFiles'"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Routes",
                "defaultValue": "[\n  {\n    path: '',\n    loadComponent: () =>\n      \"import('./components/layout/layout').then((c) => c.Layout)\",\n    children: [\n      {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: 'home',\n      },\n      {\n        path: 'home',\n        loadComponent: () => \"import('./pages/home/home').then((c) => c.Home)\",\n      },\n      {\n        path: 'files',\n        loadComponent: () => \"import('./pages/files/files').then((c) => c.Files)\",\n      },\n    ],\n  },\n  {\n    path: '',\n    pathMatch: 'full',\n    redirectTo: 'home',\n  },\n  {\n    path: '**',\n    pathMatch: 'full',\n    redirectTo: 'home',\n  },\n]"
            },
            {
                "name": "RoutesConstants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/routes.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  HOME: 'home',\n  FILES: 'files',\n}"
            },
            {
                "name": "validateDescription",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/modal/select-modal/_model/select-modal.form.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn",
                "defaultValue": "(control): ValidationErrors | null => {\n  const value = control.value;\n\n  // Built-in errors first\n  if (!value) return { required: { message: 'Description is required' } };\n  if (value.length > 128)\n    return { maxlength: { message: 'Maximum length is 128' } };\n\n  if (value.includes(`42c-${githubUsername}`))\n    return { forbiddenSubstring: true };\n  return null;\n}"
            },
            {
                "name": "validateName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/modal/select-modal/_model/select-modal.form.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn",
                "defaultValue": "(control): ValidationErrors | null => {\n  const value = control.value;\n\n  // Built-in errors first\n  if (!value) return { required: { message: 'Name is required' } };\n  if (value.length < 1)\n    return { minlength: { message: 'Minimum length is 1' } };\n  if (value.length > 32)\n    return { maxlength: { message: 'Maximum length is 32' } };\n\n  // Custom validations\n  if (typeof value !== 'string')\n    return { invalidType: { message: 'Value must be a string' } };\n  if (!/^[A-Za-z0-9_-]+$/.test(value))\n    return {\n      invalidCharacters: {\n        message:\n          'Only alphanumeric characters, underscores, and hyphens are allowed',\n      },\n    };\n  if (!value.includes(`42c-${githubUsername}`))\n    return {\n      missingSubstring: {\n        message: `Value must include the substring '42c-${githubUsername}'`,\n      },\n    };\n\n  return null;\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideBrowserGlobalErrorListeners(),\n    provideZonelessChangeDetection(),\n    provideRouter(routes, withHashLocation()),\n    provideStoreDevtools({ maxAge: 25, logOnly: !isDevMode() }),\n  ],\n}"
                }
            ],
            "src/app/store/files.store.ts": [
                {
                    "name": "FileStore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/files.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withDevtools('files'),\n  withState(initialState),\n  withComputed((state) => ({\n    filesUploaded: computed(() =>\n      Object.keys(state.uploadedFiles())\n        .map((key) => state.uploadedFiles()[key])\n        .filter((item) => !item.isDeleted),\n    ),\n  })),\n  withMethods(\n    (\n      store,\n      platformService = inject(PlatformService),\n      router = inject(Router),\n    ) => ({\n      uploadFile(file: UploadedFileModel): void {\n        patchState(store, (state) => ({\n          ...state,\n          uploadedFiles: {\n            [file.id]: {\n              ...file,\n              file: {\n                ...file.file,\n                name: file.file.name,\n              },\n            },\n            ...state.uploadedFiles,\n          },\n        }));\n\n        platformService.localStorage?.setItem(\n          JSON_FILES_LOCAL_STORAGE,\n          JSON.stringify(store.uploadedFiles()),\n        );\n\n        router.navigate(['/files']);\n      },\n\n      deleteFile(file: UploadedFileModel): void {\n        patchState(store, (state) => ({\n          ...state,\n          uploadedFiles: {\n            ...state.uploadedFiles,\n            [file.id]: {\n              ...state.uploadedFiles[file.id],\n              isDeleted: true,\n            },\n          },\n        }));\n\n        platformService.localStorage?.setItem(\n          JSON_FILES_LOCAL_STORAGE,\n          JSON.stringify(store.uploadedFiles()),\n        );\n      },\n\n      updatePagination(pagination: Partial<FileState['pagination']>): void {\n        patchState(store, (state) => ({\n          ...state,\n          pagination: {\n            ...state.pagination,\n            ...pagination,\n          },\n        }));\n\n        router.navigate([], {\n          queryParams: {\n            page: store.pagination().page,\n          },\n        });\n      },\n    }),\n  ),\n  withHooks(\n    (\n      store,\n      platformService = inject(PlatformService),\n      route = inject(ActivatedRoute),\n    ) => ({\n      onInit(): void {\n        const uploadedFilesInLocalStorage = JSON.parse(\n          platformService.localStorage?.getItem(JSON_FILES_LOCAL_STORAGE) ??\n            '{}',\n        );\n\n        const pageFromParams = route.snapshot.queryParamMap.get('page') ?? '1';\n\n        patchState(store, (state) => ({\n          uploadedFiles: {\n            ...state.uploadedFiles,\n            ...uploadedFilesInLocalStorage,\n          },\n          pagination: {\n            ...state.pagination,\n            page: +pageFromParams,\n          },\n        }));\n\n        // effect(() => {\n        //   const { page } = store.pagination();\n\n        //   router.navigate([], {\n        //     queryParams: {\n        //       page: page,\n        //     },\n        //   });\n        // });\n      },\n    }),\n  ),\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/files.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileState",
                    "defaultValue": "{\n  pagination: {\n    page: 1,\n    pageSize: 5,\n  },\n  uploadedFiles: {},\n}"
                },
                {
                    "name": "JSON_FILES_LOCAL_STORAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/files.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'jsonFiles'"
                }
            ],
            "src/app/components/modal/select-modal/_model/select-modal.form.model.ts": [
                {
                    "name": "githubUsername",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/modal/select-modal/_model/select-modal.form.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'test123'"
                },
                {
                    "name": "validateDescription",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/modal/select-modal/_model/select-modal.form.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "defaultValue": "(control): ValidationErrors | null => {\n  const value = control.value;\n\n  // Built-in errors first\n  if (!value) return { required: { message: 'Description is required' } };\n  if (value.length > 128)\n    return { maxlength: { message: 'Maximum length is 128' } };\n\n  if (value.includes(`42c-${githubUsername}`))\n    return { forbiddenSubstring: true };\n  return null;\n}"
                },
                {
                    "name": "validateName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/modal/select-modal/_model/select-modal.form.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "defaultValue": "(control): ValidationErrors | null => {\n  const value = control.value;\n\n  // Built-in errors first\n  if (!value) return { required: { message: 'Name is required' } };\n  if (value.length < 1)\n    return { minlength: { message: 'Minimum length is 1' } };\n  if (value.length > 32)\n    return { maxlength: { message: 'Maximum length is 32' } };\n\n  // Custom validations\n  if (typeof value !== 'string')\n    return { invalidType: { message: 'Value must be a string' } };\n  if (!/^[A-Za-z0-9_-]+$/.test(value))\n    return {\n      invalidCharacters: {\n        message:\n          'Only alphanumeric characters, underscores, and hyphens are allowed',\n      },\n    };\n  if (!value.includes(`42c-${githubUsername}`))\n    return {\n      missingSubstring: {\n        message: `Value must include the substring '42c-${githubUsername}'`,\n      },\n    };\n\n  return null;\n}"
                }
            ],
            "src/app/app.routes.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Routes",
                    "defaultValue": "[\n  {\n    path: '',\n    loadComponent: () =>\n      \"import('./components/layout/layout').then((c) => c.Layout)\",\n    children: [\n      {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: 'home',\n      },\n      {\n        path: 'home',\n        loadComponent: () => \"import('./pages/home/home').then((c) => c.Home)\",\n      },\n      {\n        path: 'files',\n        loadComponent: () => \"import('./pages/files/files').then((c) => c.Files)\",\n      },\n    ],\n  },\n  {\n    path: '',\n    pathMatch: 'full',\n    redirectTo: 'home',\n  },\n  {\n    path: '**',\n    pathMatch: 'full',\n    redirectTo: 'home',\n  },\n]"
                }
            ],
            "src/app/shared/routes.constants.ts": [
                {
                    "name": "RoutesConstants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/routes.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  HOME: 'home',\n  FILES: 'files',\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "children": [
            {
                "name": "home",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "files",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "**",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "home",
                "kind": "route-redirect",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "home",
                "kind": "route-redirect",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "home",
                "kind": "route-redirect",
                "filename": "src/app/app.routes.ts"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.ts",
                "type": "component",
                "linktype": "component",
                "name": "App",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.ts",
                "type": "component",
                "linktype": "component",
                "name": "Button",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/layout/layout.ts",
                "type": "component",
                "linktype": "component",
                "name": "Layout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal/delete-modal/delete-modal.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteModal",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal/select-modal/_model/select-modal.form.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectModalFormControl",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal/select-modal/_model/select-modal.form.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "githubUsername",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal/select-modal/_model/select-modal.form.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "validateDescription",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal/select-modal/_model/select-modal.form.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "validateName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal/select-modal/select-modal.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectModal",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/nav-bar/_model/navbar.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavBarModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/nav-bar/nav-bar.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavBar",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table-row/_model/table-row.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableRowModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table-row/table-row-item/table-row-item.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableRowItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table-row/table-row.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableRow",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/files/files.ts",
                "type": "component",
                "linktype": "component",
                "name": "Files",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/home.ts",
                "type": "component",
                "linktype": "component",
                "name": "Home",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/file-utils.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FileUtilsService",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "src/app/services/file-utils.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ValidateJsonResult",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/platform.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PlatformService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/routes.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RoutesConstants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/files.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FileState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/files.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UploadedFileModel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/files.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FileStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/files.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/files.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "JSON_FILES_LOCAL_STORAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}